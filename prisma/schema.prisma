// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

// Next Auth Tables
model Account {
  id                 String    @id @default(cuid())
  compoundId         String    @unique @map(name: "compound_id")
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
  @@index([compoundId], name: "compoundId")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  watchedMovies WatchedMovie[]
  listMovies    ListMovie[]
  addedMovies   Movie[]
  watchedSeries WatchedSeries[]
  watchedSeriesSeason WatchedSeriesSeason[]
  watchedSeasonEpisode WatchedSeasonEpisode[]
  addedSeries   Series[]
  listSeries    ListSeries[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// Data Tables
model WatchedMovie {
  user      User @relation(fields: [userId], references: [id])
  userId    String
  movie     Movie @relation(fields: [movieId], references: [id])
  movieId   Int
  rating    Float
  timesWatched Int?
  percentage_watched Float?
  platform  String?
  watchedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@id([userId, movieId])

}

model ListMovie {
  id        Int @id @default(autoincrement())
  user      User @relation(fields: [userId], references: [id])
  userId    String
  movie     Movie @relation(fields: [movieId], references: [id])
  movieId   Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

}

model WatchedSeries {
  id        Int @id @default(autoincrement())
  user      User @relation(fields: [userId], references: [id])
  userId    String
  series     Series @relation(fields: [seriesId], references: [id])
  seriesId   Int
  rating Float?
  timesWatched Int?
  platform String?
  watchedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ListSeries {
  id        Int @id @default(autoincrement())
  user      User @relation(fields: [userId], references: [id])
  userId    String
  series     Series @relation(fields: [seriesId], references: [id])
  seriesId   Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model WatchedSeriesSeason {
  id        Int @id @default(autoincrement())
  user      User @relation(fields: [userId], references: [id])
  userId    String
  seriesSeason     SeriesSeason @relation(fields: [seriesSeasonId], references: [id])
  seriesSeasonId   Int
  rating Float?
  timesWatched Int?
  watchedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model WatchedSeasonEpisode {
  id        Int @id @default(autoincrement())
  user      User @relation(fields: [userId], references: [id])
  userId    String
  seasonEpisode     SeasonEpisode @relation(fields: [seasonEpisodeId], references: [id])
  seasonEpisodeId   Int
  rating Float?
  timesWatched Int?
  watchedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Movie {
  id      Int @id @default(autoincrement())
  cast   CastInMovie[]
  crew CrewInMovie[]
  watchedBy WatchedMovie[]
  listBy ListMovie[]
  addedBy User? @relation(fields: [addedById], references: [id])
  verified Boolean @default(false)
  addedById String?
  tmdbId Int @unique
  title   String
  tagline String?
  description String?
  releaseDate DateTime?
  poster  String?
  backdrop String?
  genres  String[]
  budget Float?
  revenue Float?
  runtime Float?
  status String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Series {
  id Int @id @default(autoincrement())
  seasons SeriesSeason[]
  cast CastInSeries[]
  crew CrewInSeries[]
  watchedBy WatchedSeries[]
  listBy ListSeries[]
  addedBy User? @relation(fields: [addedById], references: [id])
  verified Boolean @default(false)
  addedById String?
  tmdbId Int @unique
  title String
  tagline String?
  overview String?
  type String?
  genres String[]
  firstAirDate DateTime?
  lastAirDate DateTime?
  poster String?
  backdrop String?
  seasonCount Int?
  episodeCount Int?
  status String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model SeriesSeason {
  id Int @id @default(autoincrement())
  series Series @relation(fields: [seriesId], references: [id])
  seriesId Int
  watchedBy WatchedSeriesSeason[]
  episodes SeasonEpisode[]
  tmdbId Int? @unique
  name String
  overview String?
  poster String?
  airDate DateTime?
  episodeCount Int?
  seasonNumber Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model SeasonEpisode {
  id Int @id @default(autoincrement())
  season SeriesSeason @relation(fields: [seasonId], references: [id])
  seasonId Int
  watchedBy WatchedSeasonEpisode[]
  tmdbId Int? @unique
  name String
  overview String?
  poster String?
  episodeNumber Int?
  airDate DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Cast {
  id      Int @id @default(autoincrement())
  involvedMovie CastInMovie[]
  involvedSeries CastInSeries[]
  tmdbId Int @unique
  name String
  nationality String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CastInMovie{
  cast Cast @relation(fields:[castId], references:[id])
  castId Int
  movie Movie @relation(fields:[movieId], references: [id])
  movieId Int 
  character String
  importance Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@id([castId, movieId])
}

model CastInSeries{
  cast Cast @relation(fields:[castId], references:[id])
  castId Int
  series Series @relation(fields: [seriesId], references: [id])
  seriesId Int
  character String
  importance Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@id([castId, seriesId])
}

model Crew {
  id Int @id @default(autoincrement())
  involvedMovie CrewInMovie[]
  involvedSeries CrewInSeries[]
  tmdbId Int @unique
  name String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CrewInMovie {
  crew Crew @relation(fields:[crewId], references: [id])
  crewId Int
  movie Movie @relation(fields:[movieId], references: [id])
  movieId Int
  job String
  importance Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@id([crewId, movieId])
}

model CrewInSeries {
  crew Crew @relation(fields:[crewId], references: [id])
  crewId Int
  series Series @relation(fields:[seriesId], references: [id])
  seriesId Int
  job String
  importance Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@id([crewId, seriesId])
}

model Platform {
  id      Int @id @default(autoincrement())
  name    String
  owner   String?
  icon    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}