// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Next Auth Tables
model Account {
  id                 String    @id @default(cuid())
  compoundId         String    @unique @map(name: "compound_id")
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
  @@index([compoundId], name: "compoundId")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  watchedMedias WatchedMedia[]
  addedMedias   Media[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// Data Tables
model WatchedMedia {
  id        Int @id @default(autoincrement())
  user      User @relation(fields: [userId], references: [id])
  userId    String
  media     Media @relation(fields: [mediaId], references: [id])
  mediaId   Int
  rating    Float
  timesWatched Int?
  percentageWatched Float?
  platform  String

}

model Media {
  id      Int @id @default(autoincrement())
  tmdbId Int
  title   String
  tagline String?
  description String
  year Int
  release_date DateTime
  type    String
  poster  String?
  backdrop String?
  genres  String[]
  cast   CastInMedia[]
  crew CrewInMedia[]
  addedBy User? @relation(fields: [addedById], references: [id])
  addedById String?
  watchedBy WatchedMedia[]
  verified Boolean @default(false)
}

model Cast {
  id      Int @id @default(autoincrement())
  name String
  nationality String
  involvedMedia CastInMedia[]

}

model CastInMedia{
  cast Cast @relation(fields:[castId], references:[id])
  castId Int
  media Media @relation(fields:[mediaId], references: [id])
  mediaId Int 
  character String

  @@id([castId, mediaId])
}

model Crew {
  id Int @id @default(autoincrement())
  name String
  involvedMedia CrewInMedia[]
}

model CrewInMedia {
  crew Crew @relation(fields:[crewId], references: [id])
  crewId Int
  media Media @relation(fields:[mediaId], references: [id])
  mediaId Int

  @@id([crewId, mediaId])
}